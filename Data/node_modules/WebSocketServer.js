var io = require('socket.io').listen(5000);
var fs = require('fs');
var usersOn = [];
var colorPalette=['#ffcccc','#0066ff','#006600','#cc0000','#ff9900','#6600cc','#ffff99','#993300'];

io.sockets.on('connection', function(socket) {
	console.log("New socket connection!");
    
    socket.on('login', function(loginData) {
        console.log("Requesting Login: "+loginData);
        
        var users = fs.readFileSync("users.txt");
        users = users.toString().split('\n');

        var success = false;
        var found = false;

        for (var i = 0; i < users.length;i++){
            if(loginData.localeCompare(users[i].trim()) == 0){
				success=true;
				for(var j=0;j<usersOn.length;j++){
					if(usersOn[j]==loginData.split(" ")[0]){
						found=true;
					}
				}
				if(!found){
					console.log("SUCCESSFUL LOGIN");
					usersOn.push(loginData.split(" ")[0]);
					sendUsersOn();
				}
                break;
            }
        }
		if(success&&!found){
			socket.emit('loginResponse','success');
		}
		else if(success&&found){
			socket.emit('loginResponse','user is already logged on!');
		}
        else 
			socket.emit('loginResponse','Invalid username/password');
    });
    
    socket.on('logout', function(username){
        var index = usersOn.indexOf(username);
        if(index > -1){
            usersOn.splice(index, 1);
        }
        sendUsersOn();
    });
    
    socket.on('populateUsers', function(){
       sendUsersOn(); 
    });
	
	socket.on('requestUpdate', function(username){  
		var yourUsers = [];
		for(var i=0;i<usersOn.length;i++){
			if(usersOn[i]!=username){
				yourUsers.push(usersOn[i]);
			}
		}
        socket.emit('updateUsersOn', yourUsers);
    });
	
	socket.on('startGame', function(pair){
		users = pair.split(",");
        var index = usersOn.indexOf(users[0]);
        if(index > -1){
            usersOn.splice(index, 1);
        }
        index = usersOn.indexOf(users[1]);
        if(index > -1){
            usersOn.splice(index, 1);
        }
        var colors=getRandomColors();
        console.log(colors);
        activePlayer = Math.floor(Math.random()*(2));
        io.sockets.emit('joinGame', users[0],users[1],colors,users[activePlayer]);
        sendUsersOn(); 
    });
    
    socket.on('flipTile', function(data){
        var out = data.toString().split(",");
        console.log("flipping tile: "+out[0]);
        io.sockets.emit('recieveFlipped', out[0], out[1], out[2], out[3]);
    });
    
    socket.on('changePlayers', function(data){
        var out = data.toString().split(",");
        console.log("changing players to:"+out[1]);
        io.sockets.emit('updatePlayers', out[0], out[1], out[2]);
    });
    
    function sendUsersOn(){
		io.sockets.emit('updateAvailable');
    }
    
    function getRandomColors(){
        var colorSet = [];
        var rand1;
        var rand2;
        for(var i=0;i<8;i++){
            rand1 = Math.floor(Math.random() * (16));
            while(typeof colorSet[rand1] != 'undefined'){
                rand1 = Math.floor(Math.random() * (16));
            }
            colorSet[rand1] = colorPalette[i];
            rand2 = Math.floor(Math.random() * (15)+1);
            while(typeof colorSet[rand2] != 'undefined'){
                rand2 = Math.floor(Math.random() * (16));
            }
            colorSet[rand2] = colorPalette[i];
        }
		return colorSet;
    }
    
    
    
});
console.log("Memory web sockets readied");