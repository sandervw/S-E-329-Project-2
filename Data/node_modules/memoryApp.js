var app = angular.module('memoryApp', ['ngRoute','ngSanitize']);

app.factory('socket', function ($rootScope) {
  var socket = io.connect('http://localhost:5000');
  return {
    on: function (eventName, callback) {
      socket.on(eventName, function () {  
        var args = arguments;
        $rootScope.$apply(function () {
          callback.apply(socket, args);
        });
      });
    },
    emit: function (eventName, data, callback) {
      socket.emit(eventName, data, function () {
        var args = arguments;
        $rootScope.$apply(function () {
          if (callback) {
            callback.apply(socket, args);
          }
        });
      })
    }
  };
});

app.service('userService', function(){
	var username="";
    var opponent="";
    var colors  =[];
    var activeUser="";
    var userPts = 0;
    var oppPts = 0;
	
	var setUserData = function(name){
		username = name;
	}
	
	var getUsername = function(){
		return username;
	}
    
	var setOpponent = function(name){
		opponent = name;
	}
	
	var getOpponent = function(){
		return opponent;
	}
    
	var setActive = function(player){
		activePlayer = username==player;
	}
	
	var getActive = function(){
		return activePlayer;
	}
    
    var setUserPts = function(val){
        userPts = val;
    }
    
    var getUserPts = function(){
        return userPts;
    }
    
    var setOppPts = function(val){
        oppPts = val;
    }
    
    var getOppPts = function(){
        return oppPts;
    }
    
	var setColors = function(colorSet){
		colors = colorSet;
	}
	
	var getColors = function(){
		return colors;
	}
	
	return {
		setUserData: setUserData,
		getUsername: getUsername,
		setOpponent: setOpponent,
		getOpponent: getOpponent,
		setActive: setActive,
		getActive: getActive,
		setUserPts: setUserPts,
		getUserPts: getUserPts,
		setOppPts: setOppPts,
		getOppPts: getOppPts,
		setColors: setColors,
		getColors: getColors
	};
});

app.service('gameService', function(){
    
});

app.config(function ($routeProvider) {

    $routeProvider.when("/login", {
        controller: "loginController",
        templateUrl: "login.html"
    });

    $routeProvider.when("/lobby", {
        controller: "lobbyController",
        templateUrl: "lobby.html"
    });
    
	$routeProvider.when("/game", {
        controller: "gameController",
        templateUrl: "game.html"
    });
    
    
    $routeProvider.otherwise({redirectTo: '/login'});
});

app.controller('loginController', function($scope,socket,userService) {
		$scope.validate 	= function(){
			socket.emit("login",$scope.username+" "+$scope.password);
		};
		socket.on("loginResponse", function(response){
			if(response=='success'){
				userService.setUserData($scope.username);
				window.location.href = "#/lobby";
			}
			else{
				$scope.errorMsg = response;
			}
		});
		$scope.errorMsg = "";
		$scope.username = "Kent";
		$scope.password = "KentMoo";
});

app.controller('lobbyController', function($scope,socket,userService) {
	$scope.game = function(user){
			console.log(user);
			socket.emit("startGame",user+","+userService.getUsername());
	};
	socket.emit("populateUsers");
	$scope.users = [];
	socket.on("updateAvailable", function(){
        socket.emit('requestUpdate',userService.getUsername());
	})
	socket.on("updateUsersOn", function(usersOn){
        $scope.users = usersOn;
	})
    socket.on("joinGame", function(user1, user2,colors,activePlayer){
        if(userService.getUsername() == user1){
            userService.setOpponent(user2);
            userService.setActive(activePlayer);
            userService.setColors(colors);
            window.location.href="#/game";
        }
        else if(userService.getUsername() == user2){
            userService.setOpponent(user1);
            userService.setActive(activePlayer);
            userService.setColors(colors);
            window.location.href="#/game";
        }
    })
});

app.controller('gameController', function($scope,socket,userService) {
    $scope.name = "Game";
    $scope.previousColor="";
    $scope.previousIndex =-1;
    $scope.colors = userService.getColors();
    $scope.tiles = [new Tile($scope.colors[0],   0),new Tile($scope.colors[1],   1),new Tile($scope.colors[2],   2),new Tile($scope.colors[3],   3),
                    new Tile($scope.colors[4],   4),new Tile($scope.colors[5],   5),new Tile($scope.colors[6],   6),new Tile($scope.colors[7],   7),
                    new Tile($scope.colors[8],   8),new Tile($scope.colors[9],   9),new Tile($scope.colors[10], 10),new Tile($scope.colors[11], 11),
                    new Tile($scope.colors[12], 12),new Tile($scope.colors[13], 13),new Tile($scope.colors[14], 14),new Tile($scope.colors[15], 15)];
    if(userService.getActive()){
        $scope.turnMsg ="It's your turn!";
    }
    else{
        $scope.turnMsg = "It's "+userService.getOpponent()+"'s turn";
    }
    $scope.table = [{1: $scope.tiles[0], 2: $scope.tiles[1], 3: $scope.tiles[2], 4: $scope.tiles[3]},
                    {1: $scope.tiles[4], 2: $scope.tiles[5], 3: $scope.tiles[6], 4: $scope.tiles[7]},
                    {1: $scope.tiles[8], 2: $scope.tiles[9], 3: $scope.tiles[10],4: $scope.tiles[11]},
                    {1: $scope.tiles[12],2: $scope.tiles[13],3: $scope.tiles[14],4: $scope.tiles[15]}];
    $scope.yourPts = 0;
    $scope.oppPts = 0;
    $scope.tileToggle =function(tileObj){
        if(userService.getActive()&&tileObj.index.toString()!==$scope.previousIndex.toString()&&typeof tileObj.index != 'undefined'){
            console.log("PreviousIndex: " + $scope.previousIndex);
            var out = userService.getUsername()+","+userService.getOpponent();
            if($scope.previousIndex==-1){
                $scope.previousColor = tileObj.realcolor;
                $scope.previousIndex = tileObj.index;
                socket.emit("flipTile", tileObj.index+","+out+","+true);
            }
            else{
                socket.emit("flipTile", tileObj.index+","+out+","+true);
                console.log("Take two:"+$scope.previousIndex)
                if(tileObj.realcolor!=$scope.previousColor){
                    setTimeout(function(){
                        console.log("TIMEOUT");
                        socket.emit("flipTile", $scope.previousIndex+","+out+","+false);
                        socket.emit("flipTile", tileObj.index+","+out+","+false);
                        userService.setUserPts($scope.yourPts+1);
                        
                        socket.emit('changePlayers',userService.getUsername()+","+
                                                    userService.getOpponent()+","+
                                                    userService.getUserPts()+","+
                                                    userService.getOppPts());
                    }, 2000);
                }
                else{
                    socket.emit('changePlayers',userService.getUsername()+","+
                                                userService.getOpponent()+","+
                                                userService.getUserPts()+","+
                                                userService.getOppPts());
                }
            }
            
        }
	};
    socket.on('recieveFlipped',function(index,user1,user2, show){
        if(userService.getUsername() == user2||userService.getUsername() == user1){
            console.log("flipping:"+index);
            console.log("show:"+show);

            console.log("tile at index:"+$scope.tiles[index].color);
            if (show=='true'){
                $scope.tiles[index].color = $scope.tiles[index].realcolor;
            }  
            else{
                $scope.tiles[index].color = "#888888";
            }
            console.log("tile at index is now:"+$scope.tiles[index].color);
            var c = document.getElementsByClassName("Tile");
            for(var i=0;i<c.length;i++){
                c[i].setAttribute('fill',$scope.tiles[i].color);
                c[i].style.backgroundColor = c[i].getAttribute('fill');
            }
            console.log("element at index:"+c[index]);
        }
    });
    socket.on('updatePlayers',function(user1,user2, user1Pts,user2Pts){
        if(userService.getUsername() == user2||userService.getUsername() == user1){
            userService.setActive(user2);
            if(userService.getActive()){
                $scope.turnMsg ="It's your turn!";
                userService.setUserPts(user2Pts);
                userService.setOppPts(user1Pts);
            }
            else{
                $scope.turnMsg = "It's "+userService.getOpponent()+"'s turn";
                userService.setUserPts(user1Pts);
                userService.setOppPts(user2Pts);
            } 
            $scope.previousColor = "";
            $scope.previousIndex = -1;
            $scope.yourPts = userService.getUserPts();
            $scope.oppPts = userService.getOppPts();
        }
        
    });
    $scope.$on('$viewContentLoaded', function(){
        var c = document.getElementsByClassName("Tile");
        console.log(c);
        setTimeout(function(){
            for(var i=0;i<c.length;i++){
                c[i].style.backgroundColor = c[i].getAttribute('fill');
            }
        }, 100);
    });
});

function Tile(color, index){
    this.realcolor = color;
    this.color = "#888888";
    //this.color = color;
    this.index = index;
};

app.controller('indexController', function($scope) {
});
